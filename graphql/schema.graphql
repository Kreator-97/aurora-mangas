### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Address {
  city: String
  col: String
  cp: String
  number: String
  state: String
}

input AddressInput {
  city: String!
  col: String!
  cp: String!
  number: String!
  state: String!
}

type Author {
  id: ID!
  name: String!
  series: [Serie]
}

type AuthorResponse implements Response {
  author: Author
  error: String
  message: String!
  ok: Boolean!
}

type Item {
  amount: Int!

  """Un producto es un Manga que está siendo comprado por un cliente"""
  product: Manga
}

input ItemsInput {
  amount: Int!
  productId: String!
}

type Manga {
  id: ID!
  imgURL: String!
  number: String!
  price: Int!
  published: String!
  serie: Serie
  stock: Int!
  title: String!
}

input MangaInput {
  imgURL: String!
  number: String!
  price: Int!
  published: String!
  serieId: String!
  stock: Int
  title: String!
}

type MangaResponse implements Response {
  error: String
  manga: Manga
  message: String!
  ok: Boolean!
}

type Mutation {
  """Crea un nuevo manga. Necesita autorización"""
  CreateManga(manga: MangaInput!): MangaResponse
  cancelSubscription(subscriptionID: String!): ResponseType

  """Confirm the paypal order using paypal api"""
  confirmPaypalOrder(orderId: String!, paypalOrderId: String!): ResponseType
  createAndUpdateDirection(address: AddressInput!, userId: String!): ResponseType!

  """Crea un nuevo autor. Se requiere autorización"""
  createAuthor(name: String!): AuthorResponse
  createOrder(items: [ItemsInput!]!, total: Int!): OrderResponse
  createSerie(serie: SerieInput!): SerieResponse!
  createSubscription(paypalSubscriptionID: String!, serieId: String!): ResponseType
  createUser(user: UserInput!): UserResponse
  updateManga(manga: MangaInput!, mangaId: String!): MangaResponse
}

"""Contiene la información de la orden"""
type Order {
  id: ID!
  items: [Item]
  total: Int!
}

type OrderResponse implements Response {
  error: String
  message: String!
  ok: Boolean!
  orderId: String
}

enum Periodicy {
  BIMESTRAL
  MENSUAL
}

type Query {
  allUsers: UsersResponse
  authors: [Author]
  mangas: [Manga]

  """Listado de ordernes. Se necesita autorización"""
  orders: [Order]
  ordersByUserId(userId: String!): [Order]
  series: [Serie]
}

interface Response {
  error: String
  message: String!
  ok: Boolean!
}

type ResponseType implements Response {
  error: String
  message: String!
  ok: Boolean!
}

enum Role {
  ADMIN
  USER
}

type Serie {
  author: Author!
  finished: Boolean!
  genre: String!
  id: ID!
  imgURL: String!
  isNewRelease: Boolean
  name: String!
  periodicy: Periodicy
  sinopsis: String!
  slug: String!
  volumes: [Manga]!
}

input SerieInput {
  authorId: String!
  finished: Boolean!
  genre: String!
  imgURL: String!
  name: String!
  periodicy: Periodicy!
  sinopsis: String!
}

type SerieResponse implements Response {
  error: String
  message: String!
  ok: Boolean!
  serie: Serie
}

type User {
  address: Address
  createdAt: String
  email: String
  fullname: String
  id: ID
  imgURL: String
  password: String
  role: Role
  updatedAt: String
}

input UserInput {
  email: String!
  fullname: String!
  password: String!
}

type UserResponse implements Response {
  error: String
  message: String!
  ok: Boolean!
  user: User
}

type UsersResponse implements Response {
  error: String
  message: String!
  ok: Boolean!
  users: [User]
}