// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider      = "mysql"
  url           = env("DATABASE_URL")
  relationMode  = "prisma"
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  fullname      String
  password      String
  imgURL        String?
  role          Role     @default(USER)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  provider      Provider @default(CREDENTIALS)
  orders        Order[]
  address       Address?
  subscriptions Subscription[]
}

model Subscription {
  id                  String            @id @default(uuid())
  status              SubscriptionStatus
  user                User              @relation(fields: [userId], references: [id])
  userId              String            
  serie               Serie             @relation(fields: [serieId], references: [id])
  serieId             String
  date                DateTime          @default(now())
  paypalSuscriptionId String

  @@index([userId, serieId])
}

enum SubscriptionStatus {
  ACTIVE
  PAUSED
  CANCELLED
}

model Address {
  id      String @id @default(uuid())
  state   String
  col     String
  city    String
  number  String
  cp      String
  user    User   @relation(fields: [userId], references: [id])
  userId  String @unique

  @@index([userId])
}

enum Provider {
  GOOGLE
  CREDENTIALS
}

enum Role {
  ADMIN
  USER
}

// authors and series
model Author {
  id        String @id @default(uuid())
  name      String
  serie     Serie[]
}

model Serie {
  id            String      @id @default(uuid())
  author        Author      @relation(fields: [authorId], references: [id])
  authorId      String
  finished      Boolean
  genre         String
  imgURL        String
  name          String
  periodicy     Periodicy   @default(MENSUAL)
  sinopsis      String      @db.MediumText
  volumes       Manga[]
  isNewRelease  Boolean?
  slug          String      @unique
  totalVolumes  Int         @default(0)
  unitPrice     Int         @default(0)
  paypalPlanId  String?
  subscription   Subscription[]

  @@index([authorId])
}

model Manga {
  id        String  @id @default(uuid())
  serie     Serie   @relation(fields: [serieId], references: [id])
  serieId   String
  number    String
  price     Int
  imgURL    String
  published String
  title     String
  item      Item[]
  stock     Int

  @@index([serieId])
}

enum Periodicy {
  MENSUAL
  BIMESTRAL
  SEMESTRAL
}

// orders
model Order {
  id            String    @id @default(uuid())
  items         Item[]
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  total         Int
  date          DateTime  @default(now())
  status        Status    @default(PENDING)
  transactionId String?

  @@index([userId])
}

model Item {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  amount    Int
  product   Manga   @relation(fields: [productId], references: [id])
  productId String

  @@index([orderId, productId])
}

enum Status {
  PAID
  PENDING
  CANCELLED
}
